buildscript {
  repositories { jcenter() }
  dependencies {
    classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.1'
  }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'war'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

group = 'de.saumya.mojo'
version = '0.3-SNAPSHOT'

description = """Rubygems Servlets"""

sourceCompatibility = 1.7
targetCompatibility = 1.7

mainClassName = 'de.saumya.mojo.rubygems.JettyRun'

repositories {
     mavenCentral()
}
dependencies {
    compile group: 'org.sonatype.nexus.plugins', name: 'nexus-ruby-tools', version:'2.11.2-06'
    compile group: 'de.saumya.mojo', name: 'jruby-mains', version:'0.1.0'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version:'9.2.10.v20150310'
    compile group: 'org.eclipse.jetty', name: 'jetty-webapp', version:'9.2.10.v20150310'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.3'
}

war {
  from 'src/main/webapp'
}

jar {
  manifest {
    attributes("Implementation-Title": "Gradle", "Implementation-Version": version)
  }
}

task startJetty(type: ExecJetty) {
  dependsOn shadowJar
  command = "java -jar " + shadowJar.archivePath
  ready = " Listening on "
  directory = buildDir
}


task integrationTests {
  description 'Starts jetty, then runs all the integration tests'
  dependsOn startJetty, ':src:it:directory-browsing:integrationTest'
  doLast {
    startJetty.process.destroy();
  }
}

publishing {
  publications {
    shadow(MavenPublication) {
      from components.shadow
      artifactId = 'rubygems-servlet-all'
    }
  }
}

class ExecJetty extends DefaultTask {
  String command
  String ready
  String directory

  @TaskAction
  def spawnProcess() {
    ProcessBuilder builder = new ProcessBuilder(command.split(' '))
    builder.redirectErrorStream(true)
    builder.directory(new File(directory))
    Process process = builder.start()
    InputStream stdout = process.getInputStream()
    BufferedReader reader = new BufferedReader(new InputStreamReader(stdout))
    ext.process = process;

    def line
    while ((line = reader.readLine()) != null) {
      println line
      if (line.contains(ready)) {
	break;
      }
    }
  }
}
